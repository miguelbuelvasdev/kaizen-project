name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/backend
  FRONTEND_IMAGE: ${{ github.repository }}/frontend

jobs:
  # Job de testing y linting
  test:
    name: 🧪 Test & Lint
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔍 Run tests
      run: |
        echo "🧪 Running tests..."
        # Aquí irían los tests si los tuviéramos
        echo "✅ Tests completed"

    - name: 🔍 Run linting
      run: |
        echo "🔍 Running linting..."
        # Aquí iría el linting si estuviera configurado
        echo "✅ Linting completed"

  # Job de construcción de imágenes
  build:
    name: 🐳 Build Images
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔐 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📦 Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🎨 Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Job de deployment (solo para rama main)
  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to Coolify
      run: |
        echo "🚀 Iniciando deployment en Coolify..."
        echo "📝 Para deployment manual, sigue la guía en coolify-deployment.md"
        echo "🔗 URL del repositorio: https://github.com/${{ github.repository }}"
        echo "📊 Commit: ${{ github.sha }}"
        echo "✅ Deployment workflow completado"

    - name: 📢 Notify deployment
      run: |
        echo "🎉 Deployment completado exitosamente!"
        echo "🌐 Aplicación disponible en: [Configurar URL de Coolify]"
        echo "📊 Backend API: [Configurar URL de API]"
        echo "📈 Dashboard: [Configurar URL de aplicación]"

  # Job de notificación
  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, build, deploy]
    if: always()

    steps:
    - name: 📢 Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "✅ Deployment completado exitosamente"
        elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
          echo "⏭️  Deployment omitido (no es rama main)"
        else
          echo "❌ Deployment falló"
          exit 1
        fi

    - name: 📊 Summary
      run: |
        echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Jobs Completados:" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Test & Lint: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 Build Images: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🚀 Deploy: ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Información del Build:" >> $GITHUB_STEP_SUMMARY
        echo "- **Repositorio:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Rama:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Autor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🐳 Imágenes Docker:" >> $GITHUB_STEP_SUMMARY
        echo "- Backend: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "- Frontend: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📚 Documentación:" >> $GITHUB_STEP_SUMMARY
        echo "- [README Principal](README.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Backend Docs](backend/README.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Frontend Docs](frontend/README.md)" >> $GITHUB_STEP_SUMMARY
        echo "- [Coolify Deployment](coolify-deployment.md)" >> $GITHUB_STEP_SUMMARY
